{"version":3,"sources":["components/HelloWorld.js","App.js","index.js"],"names":["assignmentComponent","singleAssignment","react_default","a","createElement","assignmentName","listItem","courseObj","courseName","grades","assignments","map","v","assignGrade","length","Number","reduce","previousGrades","currentGrade","sum","App","state","courses","addNewAssignment","newAssignmentData","courseIndex","Object","toConsumableArray","_this","console","log","push","setState","addNewCourse","newCourseName","className","HelloWorld_AssignmentForm","newCourse","this","newAssignment","allCourses","React","Component","AssignmentForm","handleCourseInputChange","event","target","value","_this2","handleAssignmentInputChange","objectSpread","name","handleCourseIndex","handleCourseFormSubmission","preventDefault","props","handleFormSubmission","onSubmit","type","placeholder","onChange","HelloWorld","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.43e8f52c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nlet sum = (grades) => grades.reduce((previousGrades, currentGrade) => currentGrade += previousGrades);\n// console.log(sum)\nlet average = (grades) => grades.length < 1 ? 0 : Number(sum(grades) / grades.length);\n// pointless to console.log here because nothing is happening yet\n// console.log(average([9, 7, 3]))\nconst courseListContainer = (allCourses) => {\n    console.log(allCourses)\n    return (\n        <div> \n            {(allCourses) ? allCourses.map(listItem) : \"Courses Not Found\"}\n        </div>\n    )\n}\nconst assignmentComponent = (singleAssignment) => {\n    return (\n        <div>\n            <li>{singleAssignment.assignmentName}</li>\n            {/* <li>{singleAssignment.assignGrade}</li> */}\n        </div>\n    )\n}\nconst listItem = (courseObj) => {\n    return (\n        <div>\n            <h2>{courseObj.courseName}</h2>\n            <h4>Average: {average(courseObj.assignments.map((v) => v.assignGrade))}% </h4>\n            <ul>Assignment: {courseObj.assignments.map(assignmentComponent)}</ul>\n        </div>\n    )\n}\nclass App extends React.Component {\n    state = {\n        courses: [\n            {\n                courseName: \"Math\",\n                assignments: [\n                    {\n                        assignmentName: \"Exam 1\",\n                        assignGrade: 92\n                    },\n                ],\n            },\n            {\n                courseName: \"Bio\",\n                assignments: [\n                    {\n                        assignmentName: \"Lab 1\",\n                        assignGrade: 90\n                    },\n                ],\n            },\n            {\n                courseName: \"Hist\",\n                assignments: [\n                    {\n                        assignmentName: \"WW1\",\n                        assignGrade: 91\n                    },\n                ],\n            },\n            {\n                courseName: \"Lit\",\n                assignments: [\n                    {\n                        assignmentName: \"Essay 1\",\n                        assignGrade: 94\n                    },\n                ],\n            }\n        ]\n    }\n    //to add new item to the to do list\n    addNewAssignment = (newAssignmentData, courseIndex) => {\n        //... = a spread operator that will create a brand new list \n        //create a copy of our todo list\n        let courses = [...this.state.courses]//[...this.state.todoList.listItems]\n        console.log(newAssignmentData, courseIndex)\n        // change typeOf newAssignmentData.assignGrade to a string\n        newAssignmentData.assignGrade = Number(newAssignmentData.assignGrade);\n        console.log(newAssignmentData, courseIndex)\n        //push new item text into the listItems array\n        // don't need newAssignmentData because courseIndex is now being called in teh parameters\n        courses[courseIndex].assignments.push(newAssignmentData)\n        //modify state using setState\n        this.setState({ courses })\n    }\n\n\n    // addNewCourse = (newCourseData, courseIndex) => {\n    //     //... = a spread operator that will create a brand new list \n    //     //create a copy of our todo list\n    //     let courses = [...this.state.courses]//[...this.state.todoList.listItems]\n    //     console.log(newCourseData, courseIndex)\n    //     // change typeOf newAssignmentData.assignGrade to a string\n    //     // newAssignmentData.assignGrade = Number(newAssignmentData.assignGrade);\n    //     // console.log(newAssignmentData)\n    //     //push new item text into the listItems array\n    //     // don't need newAssignmentData because courseIndex is now being called in teh parameters\n    //     courses[courseIndex].courseName.push(newCourseData)\n    //     console.log(newCourseData, courseIndex)\n    //     //modify state using setState\n    //     this.setState({ courses })\n    // }\n\n    addNewCourse = (newCourseName) => {\n        let courses = [...this.state.courses]\n        console.log(newCourseName)\n        courses.push(newCourseName)\n        this.setState({ courses })\n\n    }\n\n\n    render() {\n        // called  as function called addNewCourse\n        return (\n            <div className=\"\">\n                <h1 className=\"title\">Fall 2019</h1>\n                <AssignmentForm\n                    newCourse={this.addNewCourse}\n                    newAssignment={this.addNewAssignment}\n                />\n                <ul>\n                    {courseListContainer(this.state.courses)}\n                </ul>\n            </div>\n        );\n    }\n}\nclass AssignmentForm extends React.Component {\n    // must get specific state of properties\n    state = {\n        newCourseName: \"\",\n        newAssignment: {\n            assignmentName: \"\",\n            assignGrade: 0,\n        },\n        courseIndex: 0\n    }\n\n// componentDidMount() {\n//     this.getAppCourseWork()\n// }\n\n// getAppCourseWork() {\n//     getAllCoursework()\n//         .then(courses => Promise.all(courses.map(getAssignmentsForCourse)))\n//         .then(courses => {\n//             this.setState({ courses: [...courses] })\n//         })\n// }\n\n    handleCourseInputChange = (event) => {\n\n        let newCourseName = event.target.value;\n        this.setState({ newCourseName })\n    }\n\n    handleAssignmentInputChange = (event) => {\n        let newAssignment = { ...this.state.newAssignment }\n        newAssignment[event.target.name] = event.target.value;\n        this.setState({ newAssignment })\n    }\n    // handleAssignmentGradeInputChange = (event) => {\n    //   let newAssignment = {...this.state.newAssignment}\n    //   newAssignment[event.target.grade] = event.target.value;\n    //   this.setState({ newAssignment })\n    // }\n    handleCourseIndex = (event) => {\n        // newAssignment[event.target.name] = event.target.value;\n        this.setState({ courseIndex: event.target.value })\n    }\n\n    handleCourseFormSubmission = (event) => {\n        event.preventDefault();\n        this.props.newCourse(this.state.newCourse)\n    }\n\n    handleFormSubmission = (event) => {\n        event.preventDefault();\n        // not changing this.state, you're passing it\n        this.props.newAssignment(this.state.newAssignment, this.state.courseIndex)\n    }\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleCourseFormSubmission}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Course Name\"\n                        name=\"newCourseName\"\n                        value={this.state.courseName}\n                        onChange={this.handleCourseInputChange}\n                    />\n                    <input type=\"submit\" placeholder=\"Add Class\" />\n                </form >\n\n                <form onSubmit={this.handleFormSubmission}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Assignment\"\n                        name=\"assignmentName\"\n                        value={this.state.assignmentName}\n                        onChange={this.handleAssignmentInputChange}\n                    />\n                    <input\n                        type=\"number\"\n                        placeholder=\"Grade\"\n                        name=\"assignGrade\"\n                        value={this.state.assignGrade}\n                        onChange={this.handleAssignmentInputChange}\n                    />\n\n                    <input\n                        type=\"text\"\n                        placeholder=\"Course\"\n                        value={this.state.courseIndex}\n                        onChange={this.handleCourseIndex}\n                    />\n\n                    <input type=\"submit\" placeholder=\"Add Assignment\" />\n                </form >\n            </div>\n        )\n    }\n}\nexport default App;\n\n\n// *********************************************************************************\n\n// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// import React, { Component } from 'react'\n\n// const assignment = ({ name, grade }) =>\n//     (<li>{name} - {grade}</li>)\n\n// const assignmentList = (assignments) => (\n//     <ul>\n//         {assignments.map(assignment)}\n//         {/* assignments.map(x => assignment(x)) */}\n//     </ul>\n// )\n\n// const averageOfAssignments = (assignments) =>\n//     assignments.length < 1 ? 0\n//         : assignments.reduce((curSum, assignment) => curSum + assignment.grade, 0) / assignments.length\n\n// const courseAverage = (assignments) => (\n//     <p>Average: {averageOfAssignments(assignments)}</p>\n// )\n\n// const course = ({ name, assignments }) => (\n//     <div>\n//         <h3>{name}</h3>\n//         {courseAverage(assignments)}\n//         {assignmentList(assignments)}\n//     </div>\n// )\n\n// const courseList = (courses) =>\n//     (<div>{courses.map(course)}</div>)\n\n// const courseOption = (selectedId) => ({ name, _id }) => (\n//     <option\n//         value={_id}\n//         selected={selectedId === _id}\n//     >\n//         {name}\n//     </option>\n// )\n\n// const courseNameDropDown = (courses, selectedId, onChange) => (\n//     //   <select name=\"courseworkId\" onChange={onChange} >\n//     //     {courses.map(courseOption(selectedId))}\n//     //   </select>\n//     <input\n//         type=\"text\"\n//         name=\"courseworkId\"\n//         onChange={this.handleChange}\n//         placeholder=\"Assignment Grade\"\n//     />\n// )\n\n// class NewAssignmentForm extends React.Component {\n\n//     state = {\n//         newAssignment:\n//         {\n//             name: \"\",\n//             grade: 0,\n//             courseWorkId: this.props.courses.length < 1 ? null : this.props.courses[0]._id\n//         },\n//     }\n\n//     handleChange = (evnt) => {\n//         //1. copy from state\n//         let newAssignment = { ...this.state.newAssignment }\n\n//         //2. modify state\n//         newAssignment[evnt.target.name] = evnt.target.value\n\n//         //3. setState\n//         this.setState({ newAssignment })\n//     }\n\n//     handleSubmit = (evnt) => {\n//         evnt.preventDefault();\n\n//         this.props.addAssignment(this.state.newAssignment)\n//     }\n\n//     render() {\n//         return (\n//             <form onSubmit={this.handleSubmit}>\n//                 {courseNameDropDown(this.props.courses, this.state.newAssignment.courseWorkId, this.handleChange)}\n//                 <input\n//                     type=\"text\"\n//                     name=\"name\"\n//                     onChange={this.handleChange}\n//                     placeholder=\"Assignment Name\"\n//                 />\n//                 <input\n//                     type=\"number\"\n//                     name=\"grade\"\n//                     onChange={this.handleChange}\n//                     placeholder=\"Assignment Grade\"\n//                 />\n//                 <input type=\"submit\" value=\"+\" />\n//             </form>\n//         )\n//     }\n// }\n\n// const getAllCoursework = () =>\n//     fetch('/coursework')\n//         .then(res => res.json())\n//         .catch(() => []) //if an error occurs then return an Promise that resolves to an empty array\n\n// const getFirstCourseWork = () =>\n//     getAllCoursework().then(cw => cw.length < 1 ? { name: \"N/A\", assignments: [] } : cw[0])\n\n// const getAssignmentsByCourseId = (courseId) =>\n//     fetch(`/assignment/coursework/${courseId}`)\n//         .then(res => res.json())\n//         .catch(() => [])\n\n// const getAssignmentsForCourse = (course) =>\n//     getAssignmentsByCourseId(course._id)\n//         .then(assignments => ({ assignments, ...course }))\n\n// const saveAssignment = (assignment) =>\n//     fetch('/assignment',\n//         {\n//             method: 'POST'\n//             , headers: { 'Content-Type': 'application/json' }\n//             , body: JSON.stringify(assignment)\n//         }\n//     )\n\n// class App extends React.Component {\n//     state =\n//         {\n//             courses: []\n//         }\n\n//     componentDidMount() {\n//         this.getAppCourseWork()\n//     }\n\n//     getAppCourseWork() {\n//         getAllCoursework()\n//             .then(courses => Promise.all(courses.map(getAssignmentsForCourse)))\n//             .then(courses => {\n//                 this.setState({ courses: [...courses] })\n//             })\n//     }\n\n//     addNewAssignment = (createdAssignment) => {\n\n//         createdAssignment.grade = Number.parseInt(createdAssignment.grade)\n//         createdAssignment.courseworkId = this.state.course._id\n\n//         saveAssignment(createdAssignment)\n//             .then(() => this.getAppCourseWork())\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 {this.state.courses ? <NewAssignmentForm courses={this.state.courses} addAssignment={this.addNewAssignment} />\n//                     : null\n//                 }\n//                 {courseList(this.state.courses)}\n//             </div>\n//         )\n//     }\n// }\n\n// export default App;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport HelloWorld from './components/HelloWorld.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HelloWorld/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}